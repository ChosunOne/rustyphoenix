// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct DBState {
    // message oneof groups
    pub state: ::std::option::Option<DBState_oneof_state>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum DBState_oneof_state {
    account(Account),
    node(StateNode),
    refCount(u32),
}

impl DBState {
    pub fn new() -> DBState {
        ::std::default::Default::default()
    }

    // .Account account = 1;

    pub fn clear_account(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_account(&self) -> bool {
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::account(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: Account) {
        self.state = ::std::option::Option::Some(DBState_oneof_state::account(v))
    }

    // Mutable pointer to the field.
    pub fn mut_account(&mut self) -> &mut Account {
        if let ::std::option::Option::Some(DBState_oneof_state::account(_)) = self.state {
        } else {
            self.state = ::std::option::Option::Some(DBState_oneof_state::account(Account::new()));
        }
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::account(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_account(&mut self) -> Account {
        if self.has_account() {
            match self.state.take() {
                ::std::option::Option::Some(DBState_oneof_state::account(v)) => v,
                _ => panic!(),
            }
        } else {
            Account::new()
        }
    }

    pub fn get_account(&self) -> &Account {
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::account(ref v)) => v,
            _ => Account::default_instance(),
        }
    }

    // .StateNode node = 2;

    pub fn clear_node(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_node(&self) -> bool {
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: StateNode) {
        self.state = ::std::option::Option::Some(DBState_oneof_state::node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node(&mut self) -> &mut StateNode {
        if let ::std::option::Option::Some(DBState_oneof_state::node(_)) = self.state {
        } else {
            self.state = ::std::option::Option::Some(DBState_oneof_state::node(StateNode::new()));
        }
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node(&mut self) -> StateNode {
        if self.has_node() {
            match self.state.take() {
                ::std::option::Option::Some(DBState_oneof_state::node(v)) => v,
                _ => panic!(),
            }
        } else {
            StateNode::new()
        }
    }

    pub fn get_node(&self) -> &StateNode {
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::node(ref v)) => v,
            _ => StateNode::default_instance(),
        }
    }

    // uint32 refCount = 3;

    pub fn clear_refCount(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_refCount(&self) -> bool {
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::refCount(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_refCount(&mut self, v: u32) {
        self.state = ::std::option::Option::Some(DBState_oneof_state::refCount(v))
    }

    pub fn get_refCount(&self) -> u32 {
        match self.state {
            ::std::option::Option::Some(DBState_oneof_state::refCount(v)) => v,
            _ => 0,
        }
    }
}

impl ::protobuf::Message for DBState {
    fn is_initialized(&self) -> bool {
        if let Some(DBState_oneof_state::account(ref v)) = self.state {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(DBState_oneof_state::node(ref v)) = self.state {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(DBState_oneof_state::account(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(DBState_oneof_state::node(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(DBState_oneof_state::refCount(is.read_uint32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.state {
            match v {
                &DBState_oneof_state::account(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &DBState_oneof_state::node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &DBState_oneof_state::refCount(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.state {
            match v {
                &DBState_oneof_state::account(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &DBState_oneof_state::node(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &DBState_oneof_state::refCount(v) => {
                    os.write_uint32(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DBState {
        DBState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Account>(
                    "account",
                    DBState::has_account,
                    DBState::get_account,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StateNode>(
                    "node",
                    DBState::has_node,
                    DBState::get_node,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                    "refCount",
                    DBState::has_refCount,
                    DBState::get_refCount,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DBState>(
                    "DBState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DBState {
        static mut instance: ::protobuf::lazy::Lazy<DBState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DBState,
        };
        unsafe {
            instance.get(DBState::new)
        }
    }
}

impl ::protobuf::Clear for DBState {
    fn clear(&mut self) {
        self.clear_account();
        self.clear_node();
        self.clear_refCount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DBState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DBState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub balance: u64,
    pub nonce: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // uint64 balance = 1;

    pub fn clear_balance(&mut self) {
        self.balance = 0;
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: u64) {
        self.balance = v;
    }

    pub fn get_balance(&self) -> u64 {
        self.balance
    }

    // uint32 nonce = 2;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u32) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u32 {
        self.nonce
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.balance = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.nonce = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.balance != 0 {
            my_size += ::protobuf::rt::value_size(1, self.balance, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(2, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.balance != 0 {
            os.write_uint64(1, self.balance)?;
        }
        if self.nonce != 0 {
            os.write_uint32(2, self.nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "balance",
                    |m: &Account| { &m.balance },
                    |m: &mut Account| { &mut m.balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "nonce",
                    |m: &Account| { &m.nonce },
                    |m: &mut Account| { &mut m.nonce },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Account,
        };
        unsafe {
            instance.get(Account::new)
        }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.clear_balance();
        self.clear_nonce();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StateNode {
    // message fields
    pub nodeRefs: ::protobuf::RepeatedField<NodeRef>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl StateNode {
    pub fn new() -> StateNode {
        ::std::default::Default::default()
    }

    // repeated .NodeRef nodeRefs = 1;

    pub fn clear_nodeRefs(&mut self) {
        self.nodeRefs.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodeRefs(&mut self, v: ::protobuf::RepeatedField<NodeRef>) {
        self.nodeRefs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodeRefs(&mut self) -> &mut ::protobuf::RepeatedField<NodeRef> {
        &mut self.nodeRefs
    }

    // Take field
    pub fn take_nodeRefs(&mut self) -> ::protobuf::RepeatedField<NodeRef> {
        ::std::mem::replace(&mut self.nodeRefs, ::protobuf::RepeatedField::new())
    }

    pub fn get_nodeRefs(&self) -> &[NodeRef] {
        &self.nodeRefs
    }
}

impl ::protobuf::Message for StateNode {
    fn is_initialized(&self) -> bool {
        for v in &self.nodeRefs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodeRefs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodeRefs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodeRefs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StateNode {
        StateNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeRef>>(
                    "nodeRefs",
                    |m: &StateNode| { &m.nodeRefs },
                    |m: &mut StateNode| { &mut m.nodeRefs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StateNode>(
                    "StateNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StateNode {
        static mut instance: ::protobuf::lazy::Lazy<StateNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StateNode,
        };
        unsafe {
            instance.get(StateNode::new)
        }
    }
}

impl ::protobuf::Clear for StateNode {
    fn clear(&mut self) {
        self.clear_nodeRefs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StateNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeRef {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub child: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NodeRef {
    pub fn new() -> NodeRef {
        ::std::default::Default::default()
    }

    // bytes address = 1;

    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    pub fn get_address(&self) -> &[u8] {
        &self.address
    }

    // bytes child = 2;

    pub fn clear_child(&mut self) {
        self.child.clear();
    }

    // Param is passed by value, moved
    pub fn set_child(&mut self, v: ::std::vec::Vec<u8>) {
        self.child = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_child(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.child
    }

    // Take field
    pub fn take_child(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.child, ::std::vec::Vec::new())
    }

    pub fn get_child(&self) -> &[u8] {
        &self.child
    }
}

impl ::protobuf::Message for NodeRef {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.child)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.child.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.child);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.child.is_empty() {
            os.write_bytes(2, &self.child)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeRef {
        NodeRef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "address",
                    |m: &NodeRef| { &m.address },
                    |m: &mut NodeRef| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "child",
                    |m: &NodeRef| { &m.child },
                    |m: &mut NodeRef| { &mut m.child },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeRef>(
                    "NodeRef",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeRef {
        static mut instance: ::protobuf::lazy::Lazy<NodeRef> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeRef,
        };
        unsafe {
            instance.get(NodeRef::new)
        }
    }
}

impl ::protobuf::Clear for NodeRef {
    fn clear(&mut self) {
        self.clear_address();
        self.clear_child();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeRef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeRef {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bstate.proto\"x\n\x07DBState\x12$\n\x07account\x18\x01\x20\x01(\x0b\
    2\x08.AccountH\0R\x07account\x12\x20\n\x04node\x18\x02\x20\x01(\x0b2\n.S\
    tateNodeH\0R\x04node\x12\x1c\n\x08refCount\x18\x03\x20\x01(\rH\0R\x08ref\
    CountB\x07\n\x05state\"9\n\x07Account\x12\x18\n\x07balance\x18\x01\x20\
    \x01(\x04R\x07balance\x12\x14\n\x05nonce\x18\x02\x20\x01(\rR\x05nonce\"1\
    \n\tStateNode\x12$\n\x08nodeRefs\x18\x01\x20\x03(\x0b2\x08.NodeRefR\x08n\
    odeRefs\"9\n\x07NodeRef\x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\x07ad\
    dress\x12\x14\n\x05child\x18\x02\x20\x01(\x0cR\x05childb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
